<div class="product_image_area">
  <div class="container">
    <div class="row s_product_inner">
      <div class="col-lg-6">
        <div class="s_product_img">
          <div
            id="carouselExampleIndicators"
            class="carousel slide"
            data-ride="carousel"
          >
            <ol class="carousel-indicators">
              <li
                data-target="#carouselExampleIndicators"
                data-slide-to="0"
                class="active"
              >
                <img src={product.mainImage.secure_url} alt="" />
              </li>
              <li
                data-target="#carouselExampleIndicators"
                data-slide-to="1"
              >
                <img src={product.subImages.secure_url} alt="" />
              </li>
              <li
                data-target="#carouselExampleIndicators"
                data-slide-to="2"
              >
                <img src={product.subImages.secure_url} alt="" />
              </li>
            </ol>

            <div class="carousel-inner">
              <div class="carousel-item active">
                <img
                  class="d-block w-100"
                  src={product.subImages.secure_url}
                  alt="First slide"
                />
              </div>

              <div class="carousel-item">
                <img
                  class="d-block w-100"
                  src={product.subImages.secure_url}
                  alt="Second slide"
                />
              </div>
              <div class="carousel-item">
                <img
                  class="d-block w-100"
                  src={product.subImages.secure_url}
                  alt="Third slide"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-lg-5 offset-lg-1">
        <div class="s_product_text">
          <h3>{product.name}</h3>
          <h2>
            ${product.finalPrice}{" "}
            <span>
              <del>${product.price} </del>
            </span>
          </h2>
          <ul class="list">
            <li>
              <a href="#">
                {" "}
                <span>Availibility</span> : {product.status}
              </a>
            </li>
          </ul>
          <p>{product.description}</p>
          <div class="product_count">
            <label for="qty">Quantity:</label>
            <input
              type="text"
              name="qty"
              id="sst"
              maxlength="12"
              value="1"
              title="Quantity:"
              class="input-text qty"
            />
            <button
              onclick="var result = document.getElementById('sst'); var sst = result.value; if( !isNaN( sst )) result.value++;return false;"
              class="increase items-count"
              type="button"
            >
              <i class="lnr lnr-chevron-up"></i>
            </button>
            <button
              onclick="var result = document.getElementById('sst'); var sst = result.value; if( !isNaN( sst ) &amp;&amp; sst > 0 ) result.value--;return false;"
              class="reduced items-count"
              type="button"
            >
              <i class="lnr lnr-chevron-down"></i>
            </button>
          </div>
          <div class="card_area">
            <button onClick={()=> AddProductToCart(product._id)} class="main_btn" >
              Add to Cart
            </button>
            <a class="icon_btn" href="#">
              <i class="lnr lnr lnr-diamond"></i>
            </a>
            <a class="icon_btn" href="#">
              <i class="lnr lnr lnr-heart"></i>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<> 

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Cart = () => {
  const [cart, setCart] = useState([]);

  useEffect(() => {
    const savedCart = JSON.parse(localStorage.getItem('cart'));
    if (savedCart) {
      setCart(savedCart);
    }
  }, []);

  const incQtym = async (productId) => {
    const token = localStorage.getItem('userToken');

    const response = await axios.patch(`${import.meta.env.VITE_BURL}/cart/decraseQuantity`,
    {
      productId: productId
    },
    {
      headers: {
        Authorization: `Tariq__${token}`
      },
    });

    setCart(prevCart => {
      const updatedCart = prevCart.map(item => {
        if (item.productId === productId) {
          const newQuantity = item.quantity > 0 ? item.quantity - 1 : 0;
          return {
            ...item,
            quantity: newQuantity
          };
        }
        return item;
      });

      // Save updated cart to local storage
      localStorage.setItem('cart', JSON.stringify(updatedCart));
      return updatedCart;
    });
    
    console.log('Incremented');
    console.log(productId);
  };

  return (
    <div>
      {/* Your cart component logic here */}
    </div>
  );
};

export default Cart;
</>





const deleteCart = async () => {
   
  try {
    const token = localStorage.getItem("userToken");
    const { data } = await axios.patch(
      `${import.meta.env.VITE_BURL}/cart/clear`,
    
      {
        headers: {
          Authorization: `Tariq__${token}`,
        },
      }
    );
    console.log(data);
    if (data.status === 200 || data.message === "success" || data.success === true) {
      toast.success("Cart deleted successfully!", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: false,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
        transition: Bounce,
      });
      navigate("/");
    } else {
      // التعامل مع حالات النجاح الأخرى أو حالات الخطأ من الخادم
      console.error("Unexpected response:", data);
      toast.error("Failed to delete cart. Please try again.", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: false,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
        transition: Bounce,
      });
    }
  } catch (error) {
    console.error("Error deleting cart:", error);
    toast.error("An error occurred while deleting the cart.", { // رسالة خطأ عامة للمستخدم
      position: "top-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: false,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      transition: Bounce,
    });
  }
};